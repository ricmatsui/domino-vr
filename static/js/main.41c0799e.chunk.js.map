{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DOMINO_SIZE","TOOL_OFFSET","THREE","PlayField","React","useState","dominoes","setDominoes","debug","setDebug","debugRotation","setDebugRotation","debugPosition","setDebugPosition","startPosition","setStartPosition","endPosition","setEndPosition","tool","setTool","toolRef","useRef","controllerRef","useFrame","useCallback","current","JSON","stringify","buttons","inputSource","gamepad","map","button","pressed","length","hoverRayLength","axes","angle","position","copy","controller","add","previousGamepadStateRef","gamepadStateRef","dominoRunId","setDominoRunId","restartDominoes","_","uniqueId","joystick","tools","Math","floor","PI","click","x","y","slice","onSelect","event","selectedPosition","applyQuaternion","quaternion","multiplyScalar","startRotated","multiply","setFromAxisAngle","normalize","z","rotation","setFromQuaternion","toArray","setFromEuler","fromArray","newCount","distanceTo","newDominoes","range","index","id","lerp","Fragment","color","domino","Text","ref","fontSize","anchorX","anchorY","Ground","useBox","mass","args","DebugCube","CONE_QUATERNION","DebugCone","Domino","material","friction","restitution","Canvas","withControls","VRCanvas","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41c0799e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Select, VRCanvas, DefaultXRControllers } from '@react-three/xr';\nimport { Controls, withControls } from 'react-three-gui';\nimport { Text } from '@react-three/drei';\nimport { Physics, useBox } from '@react-three/cannon'\nimport _ from 'lodash';\nimport * as THREE from 'three'\nimport { useFrame } from 'react-three-fiber'\n\nconst DOMINO_SIZE = [0.375, 0.75, 0.075];\n\nconst TOOL_OFFSET = new THREE.Vector3(0, 0.05, -0.05);\n\nconst PlayField = () => {\n  const [dominoes, setDominoes] = React.useState([]);\n  const [debug, setDebug] = React.useState('Debug');\n\n  const [debugRotation, setDebugRotation] = React.useState(null);\n  const [debugPosition, setDebugPosition] = React.useState(null);\n\n  const [startPosition, setStartPosition] = React.useState(null);\n  const [endPosition, setEndPosition] = React.useState(null);\n\n  const [tool, setTool] = React.useState('domino');\n\n  const toolRef = React.useRef(null);\n\n  const controllerRef = React.useRef(null);\n\n  useFrame(\n    React.useCallback(() => {\n      if (!controllerRef.current) {\n        return;\n      }\n\n      setDebug(JSON.stringify({\n        buttons: controllerRef.current.inputSource.gamepad.buttons.map((button) => button.pressed),\n        length: controllerRef.current.hoverRayLength,\n        axes: controllerRef.current.inputSource.gamepad.axes,\n        angle: new THREE.Vector2(\n          controllerRef.current.inputSource.gamepad.axes[2],\n          controllerRef.current.inputSource.gamepad.axes[3],\n        ).angle(),\n      }, null, 4));\n    }, [\n      controllerRef,\n      setDebug,\n    ])\n  );\n\n  useFrame(\n    React.useCallback(() => {\n      if (!toolRef.current || !controllerRef.current) {\n        return;\n      }\n\n      toolRef.current.position.copy(controllerRef.current.controller.position);\n      toolRef.current.position.add(TOOL_OFFSET);\n    }, [\n      controllerRef,\n      toolRef,\n    ])\n  );\n\n  const previousGamepadStateRef = React.useRef(null);\n  const gamepadStateRef = React.useRef(null);\n\n  const [dominoRunId, setDominoRunId] = React.useState('initial');\n\n  const restartDominoes = React.useCallback(() => {\n    setDominoRunId(_.uniqueId('dominoRun_'));\n  }, [setDominoRunId]);\n\n  useFrame(\n    React.useCallback(() => {\n      if (!controllerRef.current) {\n        return;\n      }\n\n      const joystick = new THREE.Vector2(\n        controllerRef.current.inputSource.gamepad.axes[2],\n        controllerRef.current.inputSource.gamepad.axes[3],\n      );\n\n      let tool = 'domino';\n\n      if (joystick.length() > 0.5) {\n        const tools = [\n          'undo',\n          'reset',\n        ];\n\n        tool = tools[Math.floor(joystick.angle() / (2 * Math.PI) * tools.length)];\n      }\n\n      gamepadStateRef.current = {\n        click: controllerRef.current.inputSource.gamepad.buttons[0].pressed,\n        x: joystick.x,\n        y: joystick.y,\n        tool,\n      };\n\n      if (previousGamepadStateRef.current) {\n        if (gamepadStateRef.current.click && !previousGamepadStateRef.current.click) {\n          if (tool === 'reset') {\n            restartDominoes();\n          }\n\n          if (tool === 'undo') {\n            setDominoes(dominoes.slice(0, -1));\n          }\n        }\n\n        if (gamepadStateRef.current.tool !== !previousGamepadStateRef.current.tool) {\n          setTool(tool);\n        }\n      }\n\n      previousGamepadStateRef.current = { ...gamepadStateRef.current };\n    }, [\n      previousGamepadStateRef,\n      gamepadStateRef,\n      restartDominoes,\n      setTool,\n      setDominoes,\n      dominoes,\n    ])\n  );\n\n  const onSelect = React.useCallback((event) => {\n    const selectedPosition = new THREE.Vector3(0, 0, -1)\n      .applyQuaternion(event.controller.controller.quaternion)\n      .multiplyScalar(event.controller.hoverRayLength)\n      .add(event.controller.controller.position);\n\n    controllerRef.current = event.controller;\n\n    if (!gamepadStateRef.current) {\n      return;\n    }\n\n    if (new THREE.Vector2(gamepadStateRef.current.x, gamepadStateRef.current.y)\n      .length() > 0.5) {\n      return;\n    }\n\n    if (!startPosition) {\n      setStartPosition(selectedPosition);\n      return;\n    }\n\n    const startRotated = event.controller.inputSource.gamepad.buttons[5].pressed;\n\n    const endPosition = selectedPosition;\n\n    setEndPosition(endPosition);\n\n    const quaternion = new THREE.Quaternion();\n\n    quaternion.multiply(new THREE.Quaternion()\n      .setFromAxisAngle(\n        new THREE.Vector3(0, -1, 0)\n          .normalize(),\n        new THREE.Vector2(endPosition.x - startPosition.x, endPosition.z - startPosition.z)\n          .angle()\n          - Math.PI / 2\n      )\n    );\n\n    if (startRotated) {\n      quaternion.multiply(new THREE.Quaternion()\n        .setFromAxisAngle(\n          new THREE.Vector3(1, 0, 0),\n          Math.PI / 8\n        )\n      );\n    }\n\n    const rotation = new THREE.Euler()\n      .setFromQuaternion(quaternion)\n      .toArray()\n      .slice(0, 3);\n\n    setDebugRotation(new THREE.Quaternion()\n      .setFromEuler(new THREE.Euler()\n        .fromArray(rotation)));\n    setDebugPosition(startPosition);\n\n    const newCount = startRotated ? 1 : startPosition.distanceTo(endPosition) * 2;\n\n    const newDominoes = _.range(newCount)\n      .map((index) => {\n        return {\n          id: _.uniqueId('domino_'),\n          position: new THREE.Vector3()\n            .add(startPosition)\n            .lerp(endPosition, index / newCount)\n            .add(new THREE.Vector3(0, DOMINO_SIZE[1]/2, 0))\n            .toArray(),\n          rotation,\n        }\n      });\n\n    setDominoes([\n      ...event.controller.inputSource.gamepad.buttons[4].pressed ? [] : dominoes,\n      ...newDominoes,\n    ]);\n\n    setStartPosition(null);\n  }, [\n    setDebugRotation,\n    dominoes,\n    setDominoes,\n    controllerRef,\n    setStartPosition,\n    setEndPosition,\n    startPosition,\n    setDebugPosition,\n  ]);\n\n  return (\n    <React.Fragment>\n      <Select onSelect={onSelect}>\n        <Ground color='#3CCC00' />\n      </Select>\n      {dominoes.map((domino) => (\n        <Domino key={dominoRunId + domino.id} domino={domino} />\n      ))}\n      <Text\n        ref={toolRef}\n        fontSize={0.05}\n        color='white'\n        anchorX='center'\n        anchorY='middle'>\n        {tool}\n      </Text>\n      <Text\n        position={[0, 3, -7]}\n        color='white'\n        anchorX='center'\n        anchorY='middle'>\n        {debug}\n      </Text>\n      {!startPosition ? null : (\n        <DebugCube position={startPosition} color='red' />\n      )}\n      {!endPosition ? null : (\n        <DebugCube position={endPosition} color='blue' />\n      )}\n      {!debugRotation || !debugPosition ? null : (\n        <DebugCone\n          position={debugPosition}\n          quaternion={debugRotation}\n          color='green' />\n      )}\n    </React.Fragment>\n  );\n}\n\nconst Ground = ({ color }) => {\n  const [ref] = useBox(() => ({\n    mass: 0,\n    args: [10, 1, 10],\n    position: [0, -0.5, 0],\n  }));\n\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry args={[10, 1, 10]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n};\n\nconst DebugCube = ({ color, position, quaternion }) => {\n  return (\n    <mesh position={position} quaternion={quaternion}>\n      <boxBufferGeometry args={[0.2, 0.2, 0.2]} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n};\n\nconst CONE_QUATERNION = new THREE.Quaternion()\n  .setFromAxisAngle(\n    new THREE.Vector3(1, 0, 0),\n    Math.PI / 2\n  );\n\nconst DebugCone = ({ color, position, quaternion }) => {\n  return (\n    <group position={position} quaternion={quaternion}>\n      <mesh quaternion={CONE_QUATERNION}>\n        <coneBufferGeometry args={[0.1, 0.3, 10]} />\n        <meshStandardMaterial color={color} />\n      </mesh>\n    </group>\n  );\n};\n\n\nconst Domino = ({ domino }) => {\n  const [ref] = useBox(() => ({\n    mass: 1,\n    material: {\n      friction: 0.1,\n      restitution: 0,\n    },\n    args: DOMINO_SIZE,\n    position: domino.position,\n    rotation: domino.rotation,\n  }))\n\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry args={DOMINO_SIZE} />\n      <meshStandardMaterial color='#CCCCFF' />\n    </mesh>\n  );\n};\n\nconst Canvas = withControls(VRCanvas);\n\nfunction App() {\n  return (\n    <Controls.Provider>\n      <Canvas>\n        <DefaultXRControllers />\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <Physics>\n          <PlayField />\n        </Physics>\n      </Canvas>\n      <Controls />\n    </Controls.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}